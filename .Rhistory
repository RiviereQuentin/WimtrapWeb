#HIDDEN FUNCTION
#========================================================================================#
### Allows to quickly download plant genome sequences. Function modified from biomaRt
#========================================================================================#
getsequence <- function (organism, release = NULL, type = "dna", id.type = "toplevel"){
if (!is.element(type, c("dna", "cds", "pep", "ncrna")))
stop("Please a 'type' argument supported by this function: \n                 'dna', 'cds', 'pep', 'ncrna'.")
name <- NULL
if (!suppressMessages(is.available.genome(organism = organism,
db = "ensemblgenomes", details = FALSE))) {
warning("Unfortunately organism '", organism, "' is not available at ENSEMBLGENOMES. ",
"Please check whether or not the organism name is typed correctly or try db = 'ensembl'.",
" Thus, download of this species has been omitted. ",
call. = FALSE)
return(FALSE)
}
else {
taxon_id <- assembly <- accession <- NULL
new.organism <- stringr::str_to_lower(stringr::str_replace_all(organism,
" ", "_"))
ensembl_summary <- suppressMessages(as.data.frame(unlist(is.available.genome(organism = organism,
db = "ensemblgenomes", details = TRUE))))
if (nrow(ensembl_summary) == 0) {
message("Unfortunately, organism '", organism, "' does not exist in this database. Could it be that the organism name is misspelled? Thus, download has been omitted.")
return(FALSE)
}
new.organism <- paste0(stringr::str_to_upper(stringr::str_sub(ensembl_summary["name",],
1, 1)), stringr::str_sub(ensembl_summary["name",],
2, nchar(ensembl_summary["name",])))
}
get.org.info <- ensembl_summary
rest_url <- paste0("http://rest.ensembl.org/info/assembly/",
ensembl_summary["name",], "?content-type=application/json")
rest_api_status <- test_url_status(url = rest_url, organism = organism)
if (is.logical(rest_api_status)) {
return(FALSE)
}
else {
release_api <- jsonlite::fromJSON("http://rest.ensembl.org/info/eg_version?content-type=application/json")
if (!is.null(release)) {
if (!is.element(release, seq_len(as.integer(release_api))))
stop("Please provide a release number that is supported by ENSEMBLGENOMES.",
call. = FALSE)
}
if (is.null(release))
core_path <- "http://ftp.ensemblgenomes.org/pub/current/"
if (!is.null(release))
core_path <- paste0("http://ftp.ensemblgenomes.org/pub/current",
release, "/")
ensembl.qry <- paste0(core_path, stringr::str_to_lower(stringr::str_replace(get.org.info$division[1],
"Ensembl", "")), "plants/fasta/",
stringr::str_to_lower(ensembl_summary["name",]),
"/", type, "/", paste0(ensembl_summary["url_name",], ".", rest_api_status$default_coord_system_version,
".", "dna_rm", ifelse(id.type == "none", "", "."),
ifelse(id.type == "none", "", id.type), ".fa.gz"))
if (file.exists(file.path(path, paste0(new.organism,
".", rest_api_status$default_coord_system_version,
".", type, ifelse(id.type == "none", "", "."), ifelse(id.type ==
"none", "", id.type), ".fa.gz")))) {
path <- getwd()
message("File ", file.path(path, paste0(new.organism,
".", rest_api_status$default_coord_system_version,
".", type, ifelse(id.type == "none", "", "."),
ifelse(id.type == "none", "", id.type), ".fa.gz")),
" exists already. Thus, download has been skipped.")
}
else {
path <- getwd()
file.fasta <- file.path(path,
paste0(ensembl_summary["name",], ".", rest_api_status$default_coord_system_version,
".", type, ifelse(id.type == "none", "", "."),
ifelse(id.type == "none", "", id.type), ".fa.gz"))
utils::download.file(url = ensembl.qry, destfile = file.fasta)
}
return(file.fasta)
}
}
getsequence("Arabidopsis thaliana")
getsequence("Arabidopsis thaliana")
BiocManager::install("RiviereQuentin/Wimtrap",
dependencies = TRUE,
build_vignettes = TRUE,
force = TRUE)
?buildTFBSmodel
library(Wimtrap)
?buildTFBSmodel
genomic_data.ex <- c(CE = system.file("extdata/conserved_elements_example.bed", package = "Wimtrap"),
DGF = system.file("extdata/DGF_example.bed", package = "Wimtrap"),
DHS = system.file("extdata/DHS_example.bed", package = "Wimtrap")
)
imported_genomic_data.ex <- importGenomicData(biomart = TRUE,
genomic_data = genomic_data.ex, organism = "Arabidopsis thaliana")
TFBSdata.ex <- getTFBSdata(pfm = system.file("extdata/pfm_example.pfm", package = "Wimtrap"),
TFnames = c("PIF3", "TOC1"),
organism = "Arabidopsis thaliana",
imported_genomic_data = imported_genomic_data.ex)
genome <- Wimtrap:::getChromosomes("Arabidopsis thaliana")
genome
file_path <- getsequence("Arabidopsis thaliana")
file_path
Genome <- Biostrings::readDNAStringSet(file_path)
Genome
ChrNames <- GenomeInfoDb::seqlevels(Genome)
SplitChrNames <- unlist(lapply(as.list(ChrNames), base::strsplit,
split = " "))
FieldNumber <- which(SplitChrNames=="chromosome")
ChrNames <- SplitChrNames[FieldNumber+1]
ChrNames <- getRiddChr(ChrNames)
Genome <- Genome[1:length(ChrNames)]
ChrNames <- Wimtrap:::getRiddChr(ChrNames)
Genome
ChrNames
Genome <- Biostrings::readDNAStringSet(file_path)
GenomeInfoDb::seqlevels(Genome)
Genome <- Biostrings::readDNAStringSet(file_path)
ChrNames <- GenomeInfoDb::seqlevels(Genome)
ChrNames
SplitChrNames <- unlist(lapply(as.list(ChrNames), base::strsplit,
split = " "))
SplitChrNames
SplitChrNames <- lapply(as.list(ChrNames), base::strsplit,
split = " ")
SplitChrNames <- lapply(SplitChrNames, function(names) {
return(names[1])
})
SpliChrNames
SplitChrNames
SplitChrNames <- lapply(as.list(ChrNames), base::strsplit,
split = " ")
SplitChrNames
ChrNames <- GenomeInfoDb::seqlevels(Genome)
SplitChrNames <- lapply(as.list(ChrNames), base::strsplit,
split = " ")
SplitChrNames
SplitChrNames <- lapply(SplitChrNames, function(names) {
return(names[[1]][1])
})
SplitChrNames
ChrNames <- GenomeInfoDb::seqlevels(Genome)
SplitChrNames <- lapply(as.list(ChrNames), base::strsplit,
split = " ")
SplitChrNames <- unlist(lapply(SplitChrNames, function(names) {
return(names[[1]][1]))
})
SplitChrNames <- unlist(lapply(SplitChrNames, function(names) {
return(names[[1]][1]))
}))
SplitChrNames <- unlist(lapply(SplitChrNames, function(names) {
return(names[[1]][1])}))
FieldNumber <- which(SplitChrNames=="chromosome")
ChrNames <- SplitChrNames[FieldNumber+1]
ChrNames <- getRiddChr(ChrNames)
ChrNames <- Wimtrap:::getRiddChr(ChrNames)
Genome <- Genome[1:length(ChrNames)]
Genome
Genome <- Biostrings::readDNAStringSet(file_path)
ChrNames <- GenomeInfoDb::seqlevels(Genome)
SplitChrNames <- lapply(as.list(ChrNames), base::strsplit,
split = " ")
SplitChrNames <- unlist(lapply(SplitChrNames, function(names) {
return(names[[1]][1])}))
ChrNames <- getRiddChr(ChrNames)
ChrNames <- Wimtrap:::getRiddChr(ChrNames)
Genome <- Genome[1:length(ChrNames)]
names(Genome) <- ChrNames
Genome
BiocManager::install("RiviereQuentin/Wimtrap",
dependencies = TRUE,
build_vignettes = TRUE,
force = TRUE)
library(Wimtrap)
genomic_data.ex <- c(CE = system.file("extdata/conserved_elements_example.bed", package = "Wimtrap"),
DGF = system.file("extdata/DGF_example.bed", package = "Wimtrap"),
DHS = system.file("extdata/DHS_example.bed", package = "Wimtrap")
)
imported_genomic_data.ex <- importGenomicData(biomart = TRUE, organism = "Arabidopsis thaliana",
genomic_data = genomic_data.ex)
remove.packages("Wimtrap")
BiocManager::install("RiviereQuentin/Wimtrap",
dependencies = TRUE,
build_vignettes = TRUE,
force = TRUE)
library(Wimtrap)
?buildTFBSmodel
genomic_data.ex <- c(CE = system.file("extdata/conserved_elements_example.bed", package = "Wimtrap"),
DGF = system.file("extdata/DGF_example.bed", package = "Wimtrap"),
DHS = system.file("extdata/DHS_example.bed", package = "Wimtrap")
)
imported_genomic_data.ex <- importGenomicData(biomart = TRUE,
genomic_data = genomic_data.ex,organism = "Arabidopsis thaliana")
TFBSdata.ex <- getTFBSdata(pfm = system.file("extdata/pfm_example.pfm", package = "Wimtrap"),
TFnames = c("PIF3", "TOC1"),
organism = "Arabidopsis thaliana",
imported_genomic_data = imported_genomic_data.ex)
Wimtrap:::getChromosomes("Arabidopsis thaliana")
genomic_data.ex <- c(CE = system.file("extdata/conserved_elements_example.bed", package = "Wimtrap"),
DGF = system.file("extdata/DGF_example.bed", package = "Wimtrap"),
DHS = system.file("extdata/DHS_example.bed", package = "Wimtrap")
)
imported_genomic_data.ex <- importGenomicData(biomart = TRUE,
genomic_data = genomic_data.ex,organism = "Arabidopsis thaliana")
TFBSdata.ex <- getTFBSdata(pfm = system.file("extdata/pfm_example.pfm", package = "Wimtrap"),
TFnames = c("PIF3", "TOC1"),
organism = "Arabidopsis thaliana",
imported_genomic_data = imported_genomic_data.ex)
library(Wimtrap)
imported_genomic_data.ex <- importGenomicData(biomart = TRUE,
genomic_data = genomic_data.ex,organism = "Arabidopsis thaliana")
TFBSdata.ex <- getTFBSdata(pfm = system.file("extdata/pfm_example.pfm", package = "Wimtrap"),
TFnames = c("PIF3", "TOC1"),
organism = "Arabidopsis thaliana",
imported_genomic_data = imported_genomic_data.ex)
Wimtrap:::getChromosome("Arabidopsis thaliana")
Wimtrap:::getChromosomes("Arabidopsis thaliana")
organism
file_path <- tryCatch(getsequence(organism = organism), error = function(e) {return(NULL)}, finally = message("Interrogating Ensembl Plants"))
Genome <- Biostrings::readDNAStringSet(file_path)
Genome
ChrNames <- GenomeInfoDb::seqlevels(Genome)
SplitChrNames <- unlist(lapply(as.list(ChrNames), base::strsplit,
split = " "))
FieldNumber <- which(SplitChrNames=="chromosome")
ChrNames <- SplitChrNames[FieldNumber+1]
ChrNames <- getRiddChr(ChrNames)
Genome
is.null(file_path)
file_path <- tryCatch(getsequence(organism = organism), error = function(e) {return(NULL)}, finally = message("Interrogating Ensembl Plants"))
if(is.null(file_path)) {
file_path <- biomartr::getGenome( db = "ensemblgenomes",
organism,
path = file.path("_ncbi_downloads","genomes"))
Genome <- Biostrings::readDNAStringSet(file_path)
ChrNames <- GenomeInfoDb::seqlevels(Genome)
SplitChrNames <- lapply(as.list(ChrNames), base::strsplit,
split = " ")
SplitChrNames <- unlist(lapply(SplitChrNames, function(names) {
return(names[[1]][1])}))
ChrNames <- getRiddChr(ChrNames)
Genome <- Genome[1:length(ChrNames)]
names(Genome) <- ChrNames
} else {
Genome <- Biostrings::readDNAStringSet(file_path)
ChrNames <- GenomeInfoDb::seqlevels(Genome)
SplitChrNames <- unlist(lapply(as.list(ChrNames), base::strsplit,
split = " "))
FieldNumber <- which(SplitChrNames=="chromosome")
ChrNames <- SplitChrNames[FieldNumber+1]
ChrNames <- getRiddChr(ChrNames)
Genome <- Genome[1:length(ChrNames)]
names(Genome) <- ChrNames
}
file_path <- tryCatch(getsequence(organism = organism), error = function(e) {return(NULL)}, finally = message("Interrogating Ensembl Plants"))
if(is.null(file_path)) {
file_path <- biomartr::getGenome( db = "ensemblgenomes",
organism,
path = file.path("_ncbi_downloads","genomes"))
Genome <- Biostrings::readDNAStringSet(file_path)
ChrNames <- GenomeInfoDb::seqlevels(Genome)
SplitChrNames <- lapply(as.list(ChrNames), base::strsplit,
split = " ")
SplitChrNames <- unlist(lapply(SplitChrNames, function(names) {
return(names[[1]][1])}))
ChrNames <- getRiddChr(ChrNames)
Genome <- Genome[1:length(ChrNames)]
names(Genome) <- ChrNames
} else {
Genome <- Biostrings::readDNAStringSet(file_path)
ChrNames <- GenomeInfoDb::seqlevels(Genome)
SplitChrNames <- unlist(lapply(as.list(ChrNames), base::strsplit,
split = " "))
FieldNumber <- which(SplitChrNames=="chromosome")
ChrNames <- SplitChrNames[FieldNumber+1]
ChrNames <- Wimtrap:::getRiddChr(ChrNames)
Genome <- Genome[1:length(ChrNames)]
names(Genome) <- ChrNames
}
Genome
file_path <- tryCatch(getsequence(organism = organism), error = function(e) {return(NULL)}, finally = message("Interrogating Ensembl Plants"))
Genome <- Biostrings::readDNAStringSet(file_path)
ChrNames <- GenomeInfoDb::seqlevels(Genome)
SplitChrNames <- unlist(lapply(as.list(ChrNames), base::strsplit,
split = " "))
FieldNumber <- which(SplitChrNames=="chromosome")
ChrNames <- SplitChrNames[FieldNumber+1]
ChrNames <- Wimtrap:::getRiddChr(ChrNames)
Genome
Genome[1:length(ChrNames)]
length(ChrNames)
#________________________________________________________________________________________#
#HIDDEN FUNCTIONt
#========================================================================================#
### Download the genome sequence from ENSEMBL or ENSEMBL GENOMES
#========================================================================================#
getChromosomes <- function(organism)
{
file_path <- tryCatch(getsequence(organism = organism), error = function(e) {return(NULL)}, finally = message("Interrogating Ensembl Plants"))
if(is.null(file_path)) {
file_path <- biomartr::getGenome( db = "ensemblgenomes",
organism,
path = file.path("_ncbi_downloads","genomes"))
Genome <- Biostrings::readDNAStringSet(file_path)
ChrNames <- GenomeInfoDb::seqlevels(Genome)
SplitChrNames <- unlist(lapply(as.list(ChrNames), base::strsplit,
split = " "))
FieldNumber <- which(SplitChrNames=="chromosome")
ChrNames <- SplitChrNames[FieldNumber+1]
ChrNames <- Wimtrap:::getRiddChr(ChrNames)
} else {
Genome <- Genome[1:length(ChrNames)]
names(Genome) <- ChrNames
Genome <- Biostrings::readDNAStringSet(file_path)
ChrNames <- GenomeInfoDb::seqlevels(Genome)
SplitChrNames <- lapply(as.list(ChrNames), base::strsplit,
split = " ")
SplitChrNames <- unlist(lapply(SplitChrNames, function(names) {
return(names[[1]][1])}))
ChrNames <- getRiddChr(ChrNames)
Genome <- Genome[1:length(ChrNames)]
names(Genome) <- ChrNames
}
return(Genome)
}
getChromosomes("Arabidopsis thaliana")
#________________________________________________________________________________________#
#HIDDEN FUNCTIONt
#========================================================================================#
### Download the genome sequence from ENSEMBL or ENSEMBL GENOMES
#========================================================================================#
getChromosomes <- function(organism)
{
file_path <- tryCatch(getsequence(organism = organism), error = function(e) {return(NULL)}, finally = message("Interrogating Ensembl Plants"))
if(is.null(file_path)) {
file_path <- biomartr::getGenome( db = "ensemblgenomes",
organism,
path = file.path("_ncbi_downloads","genomes"))
Genome <- Biostrings::readDNAStringSet(file_path)
ChrNames <- GenomeInfoDb::seqlevels(Genome)
SplitChrNames <- unlist(lapply(as.list(ChrNames), base::strsplit,
split = " "))
FieldNumber <- which(SplitChrNames=="chromosome")
ChrNames <- SplitChrNames[FieldNumber+1]
ChrNames <- getRiddChr(ChrNames)
} else {
Genome <- Genome[1:length(ChrNames)]
names(Genome) <- ChrNames
Genome <- Biostrings::readDNAStringSet(file_path)
ChrNames <- GenomeInfoDb::seqlevels(Genome)
SplitChrNames <- lapply(as.list(ChrNames), base::strsplit,
split = " ")
SplitChrNames <- unlist(lapply(SplitChrNames, function(names) {
return(names[[1]][1])}))
ChrNames <- Wimtrap:::getRiddChr(ChrNames)
Genome <- Genome[1:length(ChrNames)]
names(Genome) <- ChrNames
}
return(Genome)
}
getChromosomes("Arabidopsis thaliana")
remove.packages("Wimtrap")
BiocManager::install("RiviereQuentin/Wimtrap",
dependencies = TRUE,
build_vignettes = TRUE,
force = TRUE)
library(Wimtrap)
genomic_data.ex <- c(CE = system.file("extdata/conserved_elements_example.bed", package = "Wimtrap"),
DGF = system.file("extdata/DGF_example.bed", package = "Wimtrap"),
DHS = system.file("extdata/DHS_example.bed", package = "Wimtrap")
)
imported_genomic_data.ex <- importGenomicData(biomart = TRUE,
genomic_data = genomic_data.ex,organism = "Arabidopsis thaliana")
TFBSdata.ex <- getTFBSdata(pfm = system.file("extdata/pfm_example.pfm", package = "Wimtrap"),
TFnames = c("PIF3", "TOC1"),
organism = "Arabidopsis thaliana",
imported_genomic_data = imported_genomic_data.ex)
Wimtrap:::getChromosomes("Arabidopsis thaliana")
#________________________________________________________________________________________#
#HIDDEN FUNCTIONt
#========================================================================================#
### Download the genome sequence from ENSEMBL or ENSEMBL GENOMES
#========================================================================================#
getChromosomes <- function(organism)
{
file_path <- tryCatch(getsequence(organism = organism), error = function(e) {return(NULL)}, finally = message("Interrogating Ensembl Plants"))
if(is.null(file_path)) {
file_path <- biomartr::getGenome( db = "ensemblgenomes",
organism,
path = file.path("_ncbi_downloads","genomes"))
Genome <- Biostrings::readDNAStringSet(file_path)
ChrNames <- GenomeInfoDb::seqlevels(Genome)
SplitChrNames <- unlist(lapply(as.list(ChrNames), base::strsplit,
split = " "))
FieldNumber <- which(SplitChrNames=="chromosome")
ChrNames <- SplitChrNames[FieldNumber+1]
ChrNames <- getRiddChr(ChrNames)
Genome <- Genome[1:length(ChrNames)]
names(Genome) <- ChrNames
} else {
Genome <- Genome[1:length(ChrNames)]
names(Genome) <- ChrNames
Genome <- Biostrings::readDNAStringSet(file_path)
ChrNames <- GenomeInfoDb::seqlevels(Genome)
SplitChrNames <- lapply(as.list(ChrNames), base::strsplit,
split = " ")
SplitChrNames <- unlist(lapply(SplitChrNames, function(names) {
return(names[[1]][1])}))
ChrNames <- getRiddChr(ChrNames)
Genome <- Genome[1:length(ChrNames)]
names(Genome) <- ChrNames
}
return(Genome)
}
#________________________________________________________________________________________#
#HIDDEN FUNCTIONt
#========================================================================================#
### Download the genome sequence from ENSEMBL or ENSEMBL GENOMES
#========================================================================================#
getChromosomes <- function(organism)
{
file_path <- tryCatch(getsequence(organism = organism), error = function(e) {return(NULL)}, finally = message("Interrogating Ensembl Plants"))
if(is.null(file_path)) {
file_path <- biomartr::getGenome( db = "ensemblgenomes",
organism,
path = file.path("_ncbi_downloads","genomes"))
Genome <- Biostrings::readDNAStringSet(file_path)
ChrNames <- GenomeInfoDb::seqlevels(Genome)
SplitChrNames <- unlist(lapply(as.list(ChrNames), base::strsplit,
split = " "))
FieldNumber <- which(SplitChrNames=="chromosome")
ChrNames <- SplitChrNames[FieldNumber+1]
ChrNames <- getRiddChr(ChrNames)
Genome <- Genome[1:length(ChrNames)]
names(Genome) <- ChrNames
} else {
Genome <- Genome[1:length(ChrNames)]
names(Genome) <- ChrNames
Genome <- Biostrings::readDNAStringSet(file_path)
ChrNames <- GenomeInfoDb::seqlevels(Genome)
SplitChrNames <- lapply(as.list(ChrNames), base::strsplit,
split = " ")
SplitChrNames <- unlist(lapply(SplitChrNames, function(names) {
return(names[[1]][1])}))
ChrNames <- Wimtrap:::getRiddChr(ChrNames)
Genome <- Genome[1:length(ChrNames)]
names(Genome) <- ChrNames
}
return(Genome)
}
getChromosomes("Arabidopsis thaliana")
#________________________________________________________________________________________#
#HIDDEN FUNCTIONt
#========================================================================================#
### Download the genome sequence from ENSEMBL or ENSEMBL GENOMES
#========================================================================================#
getChromosomes <- function(organism)
{
file_path <- tryCatch(getsequence(organism = organism), error = function(e) {return(NULL)}, finally = message("Interrogating Ensembl Plants"))
if(is.null(file_path)) {
file_path <- biomartr::getGenome( db = "ensemblgenomes",
organism,
path = file.path("_ncbi_downloads","genomes"))
Genome <- Biostrings::readDNAStringSet(file_path)
ChrNames <- GenomeInfoDb::seqlevels(Genome)
SplitChrNames <- unlist(lapply(as.list(ChrNames), base::strsplit,
split = " "))
FieldNumber <- which(SplitChrNames=="chromosome")
ChrNames <- SplitChrNames[FieldNumber+1]
ChrNames <- getRiddChr(ChrNames)
Genome <- Genome[1:length(ChrNames)]
names(Genome) <- ChrNames
} else {
Genome <- Genome[1:length(ChrNames)]
names(Genome) <- ChrNames
Genome <- Biostrings::readDNAStringSet(file_path)
ChrNames <- GenomeInfoDb::seqlevels(Genome)
SplitChrNames <- lapply(as.list(ChrNames), base::strsplit,
split = " ")
SplitChrNames <- unlist(lapply(SplitChrNames, function(names) {
return(names[[1]][1])}))
ChrNames <- Wimtrap:::getRiddChr(SplitChrNames)
Genome <- Genome[1:length(ChrNames)]
names(Genome) <- ChrNames
}
return(Genome)
}
getChromosomes("Arabidopsis thaliana")
BiocManager::install("RiviereQuentin/Wimtrap",
dependencies = TRUE,
build_vignettes = TRUE,
force = TRUE)
genomic_data.ex <- c(CE = system.file("extdata/conserved_elements_example.bed", package = "Wimtrap"),
DGF = system.file("extdata/DGF_example.bed", package = "Wimtrap"),
DHS = system.file("extdata/DHS_example.bed", package = "Wimtrap")
)
imported_genomic_data.ex <- importGenomicData(biomart = TRUE,
genomic_data = genomic_data.ex,organism = "Arabidopsis thaliana")
TFBSdata.ex <- getTFBSdata(pfm = system.file("extdata/pfm_example.pfm", package = "Wimtrap"),
TFnames = c("PIF3", "TOC1"),
organism = "Arabidopsis thaliana",
imported_genomic_data = imported_genomic_data.ex)
library(Wimtrap)
genomic_data.ex <- c(CE = system.file("extdata/conserved_elements_example.bed", package = "Wimtrap"),
DGF = system.file("extdata/DGF_example.bed", package = "Wimtrap"),
DHS = system.file("extdata/DHS_example.bed", package = "Wimtrap")
)
imported_genomic_data.ex <- importGenomicData(biomart = TRUE,
genomic_data = genomic_data.ex,organism = "Arabidopsis thaliana")
TFBSdata.ex <- getTFBSdata(pfm = system.file("extdata/pfm_example.pfm", package = "Wimtrap"),
TFnames = c("PIF3", "TOC1"),
organism = "Arabidopsis thaliana",
imported_genomic_data = imported_genomic_data.ex)
remove.packages("Wimtrap")
golem::run_dev()
